# save2 test using the deprecated list delimiter ';'
save2_deprecated_delimiter

# save 2 states
save2

# save 2 states with human readable times
save2_H

# state saving times are not reached
save2_mismatch

# state saving times are not reached
save2_begin_mismatch

# save multiple states
save_at_interval

# saving interval does not match step-length
save_at_interval_mismatch

# save multiple states with human-readable times (no colons)
save_at_interval_H

# save multiple states with human-readable times (no colons)
save_default_names_H

# the input is taken from test save2/state2.sumo
load

# the input is taken from test save2/state2.sumo and --scale is set
load_scaled

# the input is taken from test save2/state2.sumo
# 1 vehicle is removed while loading
load_remove

# the input is taken from test save2/state.sumo
load_late_insertion

# the input is taken from test save2/state.sumo
load_and_save

# the loaded state is saved in the same step
# the input is regenerated by running saveState.sumocfg
load_and_save_same

# the input is taken from test save2/state.sumo	
# 
# load the route file again but with option -a
load_routes_as_additional

# save 2 states
save_actionStepLength

# the input is taken from test save2/state.sumo
load_and_save_actionStepLength

# save 2 states
save_actionStepLength2

# the input is taken from test save2/state.sumo
load_and_save_actionStepLength2

# save state for a network with internal links
save_with_internal_links

# save in a network with taz
save_taz

# save in a network with taz which has an invalid route
save_taz_route_invalid

# load a vehicle that arrives in the first step (see #2938)
# the input is regenerated by running saveState.sumocfg
load_arriving

# load vehicles that depart in the future (added to the insertion queue via additional file) and test whether the option --load-state.offset works.
# the input is regenerated by running saveState.sumocfg
load_shifted

# save routeProbe data as part of state
save_routeProbe

# save started and ended times if loaded from input
save_stopTimes
save_pastStop_param
