# simple network with two branches that merge towards a single stop
one_switch

# switch is being passed by trains (targetting a different stop) in between the two constraint-trains 
in_between

# train reversal can have the same effect as a switch by merging two train routes from different sources
reversal

# find insertion conflicts
insertion

# test insertion conflicts where trains a driving in opposite direction
oppositeInsertion

# do not enter station (block with stop) until foe vehicle has been inserted there and left
insertionFoe

# test foeInsertion constraints where trains are driving in opposite direction
oppositeInsertionFoe

# maintain vehicle order at a parking-stop (especially when partial started/ended information is available)
parkingInsertion

# simple network with two branches that merge towards a single stop
# test aborting after inconsistency
abort

# add redundant constraints to limit the impact of swapping constraints at runtime
redundant

# integrate schedule information with post-facto timing information 
# arrival,until + started,ended
started_ended

# constraints for use of bidirectional sections in opposite directions
bidi

# the trains that merge at a switch target different stopping places which belong to the same operations control point (ocp)
one_switch_two_ocp_tracks
