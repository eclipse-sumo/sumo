 Retrying in 1 seconds
Simulation parameters:
  end: 600.0
  interval: 30
  time_limit: 10
  cost_type: CostType.DISTANCE
  drf: 1.5
  waiting_time: 900
  fix_allocation: True
timestep: 0.0
Reservations waiting: ['0']
Taxis empty: ('v0', 'v1')
Solve CPDP
Start creating the model.
dp reservations: ['0']
do reservations: []
Reservation 0 starts at edge B0C0
Reservation 0 ends at edge C1D1
Reservation 0 has direct route costs 680
Penalty factor is 2000
Start solving the problem.
 Register distance callback.
 Create time dimension.
 Add distance constraints...
 Add pickup and delivery constraints...
pickup/dropoff nodes: 1/2
allow to reject new reservation 0
 Add direct route factor constraints...
reservation 0: direct route cost 680 and (hard) max cost 1020
 Add dropoff constraints...
 Add "no re-allocation" constraints...
 Add capacity constraints...
 Add time windows constraints...
hard time window for node 1: [1, 600]
hard time window for node 2: [1, 600]
hard time window for node 3: [1, 600]
hard time window for node 4: [1, 600]
 Add waiting time constraints...
reservation 0 has a maximum (hard) pickup time at 900
## Done
 Set solution heuristic...
Start solving the problem.
Objective: 1268
Route for vehicle 0:
     3 (L: 0, C: 0, T: (1,445))
 ->  1 (L: 1, C: 588, T: (43,487))
 ->  2 (L: 0, C: 1268, T: (156,600))
 ->  0 (L: 0, C: 1268, T: (156,600))
Costs of the route: 1268

Route for vehicle 1:
     4 (L: 0, C: 0, T: (1,600))
 ->  0 (L: 0, C: 0, T: (1,600))
Costs of the route: 0

Total cost of the routes: 1268
Start interpreting the solution for SUMO.
Dispatching v0 with ['0', '0']
Costs for v0: 1268
Dispatching v1 with []
Costs for v1: 0
timestep: 30.0
Reservations waiting: ['1']
Reservations being picked up: ['0']
Taxis empty: ('v1',)
Taxis picking up: ('v0',)
Solve CPDP
Start creating the model.
dp reservations: ['1', '0']
do reservations: []
Reservation 1 starts at edge C0D0
Reservation 0 starts at edge B0C0
Reservation 1 ends at edge D0D1
Reservation 0 ends at edge C1D1
Reservation 1 has direct route costs 385
Reservation 0 has direct route costs 680
Penalty factor is 2000
Start solving the problem.
 Register distance callback.
 Create time dimension.
 Add distance constraints...
 Add pickup and delivery constraints...
pickup/dropoff nodes: 1/2
allow to reject new reservation 1
pickup/dropoff nodes: 3/4
 Add direct route factor constraints...
reservation 1: direct route cost 385 and (hard) max cost 578
reservation 0: direct route cost 680 and (soft) max cost 1020
 Add dropoff constraints...
 Add "no re-allocation" constraints...
reservation 0 in veh id=0
 Add capacity constraints...
 Add time windows constraints...
hard time window for node 1: [30, 600]
hard time window for node 2: [30, 600]
soft time window for node 3: [30, 600]
soft time window for node 4: [30, 600]
hard time window for node 5: [30, 600]
hard time window for node 6: [30, 600]
 Add waiting time constraints...
reservation 1 has a maximum (hard) pickup time at 910
reservation 0 has a maximum (soft) pickup time at 900
## Done
 Set solution heuristic...
Start solving the problem.
Initial solution:
veh 0: [3, 4]
veh 1: []
Objective: 2326
Route for vehicle 0:
     5 (L: 0, C: 0, T: (30,30))
 ->  3 (L: 1, C: 286, T: (51,51))
 ->  4 (L: 0, C: 966, T: (164,164))
 ->  1 (L: 1, C: 1941, T: (245,245))
 ->  2 (L: 0, C: 2326, T: (336,336))
 ->  0 (L: 0, C: 2326, T: (336,336))
Costs of the route: 2326

Route for vehicle 1:
     6 (L: 0, C: 0, T: (30,30))
 ->  0 (L: 0, C: 0, T: (30,30))
Costs of the route: 0

Total cost of the routes: 2326
Start interpreting the solution for SUMO.
Dispatching v0 with ['0', '0', '1', '1']
Costs for v0: 2326
Dispatching v1 with []
Costs for v1: 0
timestep: 60.0
Reservations being picked up: ['1']
Reservations en route: ['0']
Taxis empty: ('v1',)
Taxis picking up: ('v0',)
Taxis occupied: ('v0',)
Taxis occupied and picking up: ('v0',)
timestep: 90.0
Reservations being picked up: ['1']
Reservations en route: ['0']
Taxis empty: ('v1',)
Taxis picking up: ('v0',)
Taxis occupied: ('v0',)
Taxis occupied and picking up: ('v0',)
timestep: 120.0
Reservations being picked up: ['1']
Reservations en route: ['0']
Taxis empty: ('v1',)
Taxis picking up: ('v0',)
Taxis occupied: ('v0',)
Taxis occupied and picking up: ('v0',)
timestep: 150.0
Reservations waiting: ['2']
Reservations being picked up: ['1']
Reservations en route: ['0']
Taxis empty: ('v1',)
Taxis picking up: ('v0',)
Taxis occupied: ('v0',)
Taxis occupied and picking up: ('v0',)
Solve CPDP
Start creating the model.
dp reservations: ['2', '1']
do reservations: ['0']
Reservation 2 starts at edge C2C1
Reservation 1 starts at edge C0D0
Reservation 2 ends at edge D1D2
Reservation 1 ends at edge D0D1
Drop-off of reservation 0 at edge C1D1
Reservation 2 has direct route costs 485
Reservation 1 has direct route costs 385
Reservation 0 has direct route costs 680
Penalty factor is 2000
Start solving the problem.
 Register distance callback.
 Create time dimension.
 Add distance constraints...
 Add pickup and delivery constraints...
pickup/dropoff nodes: 1/2
allow to reject new reservation 2
pickup/dropoff nodes: 3/4
 Add direct route factor constraints...
reservation 2: direct route cost 485 and (hard) max cost 728
reservation 1: direct route cost 385 and (soft) max cost 577
reservation 0: direct route cost 680 and (soft) max cost 1020, already used costs 675
 Add dropoff constraints...
reservation 0 in veh v0(0), droppoff node: 5
 Add "no re-allocation" constraints...
reservation 1 in veh id=0
 Add capacity constraints...
 Add time windows constraints...
hard time window for node 1: [150, 600]
hard time window for node 2: [150, 600]
soft time window for node 3: [150, 600]
soft time window for node 4: [150, 600]
soft time window for node 5: [150, 600]
hard time window for node 6: [150, 600]
hard time window for node 7: [150, 600]
 Add waiting time constraints...
reservation 2 has a maximum (hard) pickup time at 1040
reservation 1 has a maximum (soft) pickup time at 910
## Done
 Set solution heuristic...
Start solving the problem.
Initial solution:
veh 0: [5, 3, 4]
veh 1: []
Objective: 2716
Route for vehicle 0:
     6 (L: 1, C: 0, T: (150,150))
 ->  5 (L: 0, C: 286, T: (171,171))
 ->  3 (L: 1, C: 1261, T: (252,252))
 ->  4 (L: 0, C: 1646, T: (343,343))
 ->  1 (L: 1, C: 2231, T: (391,391))
 ->  2 (L: 0, C: 2716, T: (492,492))
 ->  0 (L: 0, C: 2716, T: (492,492))
Costs of the route: 2716

Route for vehicle 1:
     7 (L: 0, C: 0, T: (150,150))
 ->  0 (L: 0, C: 0, T: (150,150))
Costs of the route: 0

Total cost of the routes: 2716
Start interpreting the solution for SUMO.
Dispatching v0 with ['0', '1', '1', '2', '2']
Costs for v0: 2716
Dispatching v1 with []
Costs for v1: 0
timestep: 180.0
Reservations being picked up: ['1', '2']
Reservations en route: ['0']
Taxis empty: ('v1',)
Taxis picking up: ('v0',)
Taxis occupied: ('v0',)
Taxis occupied and picking up: ('v0',)
timestep: 210.0
Reservations being picked up: ['1', '2']
Reservations en route: ['0']
Taxis empty: ('v1',)
Taxis picking up: ('v0',)
Taxis occupied: ('v0',)
Taxis occupied and picking up: ('v0',)
timestep: 240.0
Reservations being picked up: ['1', '2']
Taxis empty: ('v1',)
Taxis picking up: ('v0',)
timestep: 270.0
Reservations being picked up: ['2']
Reservations en route: ['1']
Taxis empty: ('v1',)
Taxis picking up: ('v0',)
Taxis occupied: ('v0',)
Taxis occupied and picking up: ('v0',)
timestep: 300.0
Reservations being picked up: ['2']
Reservations en route: ['1']
Taxis empty: ('v1',)
Taxis picking up: ('v0',)
Taxis occupied: ('v0',)
Taxis occupied and picking up: ('v0',)
timestep: 330.0
Reservations being picked up: ['2']
Reservations en route: ['1']
Taxis empty: ('v1',)
Taxis picking up: ('v0',)
Taxis occupied: ('v0',)
Taxis occupied and picking up: ('v0',)
timestep: 360.0
Reservations being picked up: ['2']
Taxis empty: ('v1',)
Taxis picking up: ('v0',)
timestep: 390.0
Reservations being picked up: ['2']
Taxis empty: ('v1',)
Taxis picking up: ('v0',)
timestep: 420.0
Reservations en route: ['2']
Taxis empty: ('v1',)
Taxis occupied: ('v0',)
timestep: 450.0
Reservations en route: ['2']
Taxis empty: ('v1',)
Taxis occupied: ('v0',)
timestep: 480.0
Reservations en route: ['2']
Taxis empty: ('v1',)
Taxis occupied: ('v0',)
timestep: 510.0
Reservations en route: ['2']
Taxis empty: ('v1',)
Taxis occupied: ('v0',)
timestep: 540.0
Taxis empty: ('v0', 'v1')
timestep: 570.0
Taxis empty: ('v0', 'v1')
timestep: 600.0
Taxis empty: ('v0', 'v1')
